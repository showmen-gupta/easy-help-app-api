# NOTE: update this with your service name
service: easy-help-api
# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-easy-help-app-db
  
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ EasyHelpTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in createUser.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: lambdas/createUser.create
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in fetchUser.js
    # - path: url path is /getUsers/{email}
    # - method: GET request
    handler: lambdas/fetchUser.fetch
    events:
      - http:
          path: getUsers/{email}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in listUser.js
    # - path: url path is /userList
    # - method: GET request
    handler: lambdas/listUser.list
    events:
      - http:
          path: userList
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in updateUser.js
    # - path: url path is /updateUser/{email}
    # - method: PUT request
    handler: lambdas/updateUser.update
    events:
      - http:
          path: updateUser/{email}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{email}
    # - method: DELETE request
    handler: lambdas/deleteUser.remove
    events:
      - http:
          path: removeUser/{email}
          method: delete
          cors: true
          authorizer: aws_iam  